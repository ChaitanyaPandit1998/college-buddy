{"version":3,"sources":["chart.js","collegeInfo.js","App.js","reportWebVitals.js","index.js"],"names":["Plot","createPlotlyComponent","Plotly","URL","StateWiseCollegePie","useState","stateCollegeDict","setStateCollegeDict","useEffect","a","axios","get","res","console","log","state","data","stateData","Object","keys","values","fetchData","type","labels","marker","opacity","line","width","hovertemplate","layout","height","title","font","family","size","color","template","StateWiseCollegeBar","x","y","CourseWiseCollegePie","courseCollegeDict","setCourseCollegeDict","courses","courseData","CourseWiseCollegeBar","YearWithColleges","yearCollegeDict","setYearCollegeDict","yearFounded","yearData","mode","dash","App","className","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4614bdda.chunk.js","sourcesContent":["import {React, useState, useEffect} from 'react';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport axios from 'axios';\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plot = createPlotlyComponent(Plotly);\r\nconst URL = \"https://college-buddy123.herokuapp.com/\"\r\n\r\n//Statewise Colleges-\r\nfunction StateWiseCollegePie(){\r\n\r\n  const [stateCollegeDict, setStateCollegeDict] = useState({});\r\n  \r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async() => {\r\n      const res = await axios.get(`${URL}`);\r\n      console.log(\"res\", res);\r\n      const {state} = res.data.data;\r\n      const stateData = {'state': Object.keys(state), 'num': Object.values(state)};\r\n      setStateCollegeDict(stateData);\r\n    } \r\n    fetchData();\r\n  }, []);\r\n  \r\n  // let stateCollegeDict = {};\r\n  // stateCollegeDict = { \r\n  //   'state':['MP','UP','MH'],\r\n  //   'num':[10,20,30]\r\n  // };\r\nreturn (\r\n<div>\r\n<Plot\r\ndata={[\r\n  {\r\n    type: 'pie', labels: stateCollegeDict['state'], values: stateCollegeDict['num'],marker:{opacity:0.3,line:{width:2}},hovertemplate: '<b>COUNT</b>: %{value}' +\r\n    '<br><b>STATE</b>: %{label}<br><extra></extra>'\r\n    \r\n  },\r\n]}\r\nlayout={ {\r\n  width: 800, height: 800, title: 'STATEWISE NUMBER OF COLLEGES',font: {family: 'Roboto, sans-serif',size: 20,color: '#7f7f7f'},template:'plotly_dark',\r\n  } }\r\n/>\r\n      </div>\r\n  // {x: [1, 2, 3],y: [2, 6, 3],type: 'scatter',mode: 'lines+markers',marker: {color: 'purple'},},\r\n);\r\n}\r\n\r\n\r\nfunction StateWiseCollegeBar(){\r\n  const [stateCollegeDict, setStateCollegeDict] = useState({});\r\n \r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async() => {\r\n      const res = await axios.get(`${URL}`);\r\n      console.log(\"res1\", res);\r\n      const {state} = res.data.data;\r\n      const stateData = {'state': Object.keys(state), 'num': Object.values(state)};\r\n      console.log(\"stateData\", stateData)\r\n      setStateCollegeDict(stateData);\r\n      \r\n    } \r\n    fetchData();\r\n  }, []);\r\n  // let stateCollegeDict = {};\r\n  // stateCollegeDict = { \r\n  //   'state':['MP','UP','MH'],\r\n  //   'num':[10,20,30]\r\n  // };\r\nreturn (\r\n<div>\r\n<Plot\r\ndata={[\r\n  {\r\n    type: 'bar', x: stateCollegeDict['state'], y: stateCollegeDict['num'],marker: { color: 'rgb(158,202,225)',\r\n    opacity: 0.6,\r\n    line: {\r\n      color: 'rgb(269,48,107)',\r\n      width: 2\r\n    }},hovertemplate: '<b>COUNT</b>: %{y}' +\r\n    '<br><b>STATE</b>: %{x}<br><extra></extra>'\r\n    \r\n  },\r\n]}\r\nlayout={ {\r\n  width: 800, height: 1120, title: 'STATEWISE NUMBER OF COLLEGES',font: {family: 'Roboto, sans-serif',size: 20,color: '#7f7f7f'},template:'presentation'\r\n  } }\r\n/>\r\n      </div>\r\n);\r\n}\r\n\r\nfunction CourseWiseCollegePie(){\r\n  \r\n  const [courseCollegeDict, setCourseCollegeDict] = useState({});\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async() => {\r\n      const res = await axios.get(`${URL}`);\r\n      console.log(\"res2\", res);\r\n      const {courses} = res.data.data;\r\n     \r\n      const courseData = {'course': Object.keys(courses), 'num': Object.values(courses)};\r\n  \r\n      setCourseCollegeDict(courseData);\r\n    } \r\n    fetchData();\r\n  }, []);\r\n  // let courseCollegeDict = {};\r\n  // courseCollegeDict = { \r\n  //   'course':['CS','IT','MECH'],\r\n  //   'num':[50,60,30]\r\n  // };\r\n\r\nreturn (\r\n<div>\r\n<Plot\r\ndata={[\r\n  {\r\n    type: 'pie', labels: courseCollegeDict['course'], values: courseCollegeDict['num'],marker:{opacity:0.3,line:{width:2}},hovertemplate: '<b>COUNT</b>: %{value}' +\r\n    '<br><b>COURSE</b>: %{label}<br><extra></extra>'\r\n    \r\n  },\r\n]}\r\nlayout={ {\r\n  width: 800, height: 700, title: 'COURSEWISE NUMBER OF COLLEGES',font: {family: 'Roboto, sans-serif',size: 20,color: '#7f7f7f'},\r\n  template:\"presentation\"\r\n  } }\r\n/>\r\n      </div>\r\n);\r\n}\r\n\r\nfunction CourseWiseCollegeBar(){\r\n \r\n  const [courseCollegeDict, setCourseCollegeDict] = useState({});\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async() => {\r\n      const res = await axios.get(`${URL}`);\r\n      console.log(\"res3\", res);\r\n      const {courses} = res.data.data;\r\n      const courseData = {'course': Object.keys(courses), 'num': Object.values(courses)};\r\n      setCourseCollegeDict(courseData);\r\n    } \r\n    fetchData();\r\n  }, []);\r\n  // let courseCollegeDict = {};\r\n  // courseCollegeDict = { \r\n  //   'course':['CS','IT','MECH'],\r\n  //   'num':[50,60,30]\r\n  // };\r\n\r\nreturn (\r\n<div>\r\n<Plot\r\ndata={[\r\n  {\r\n    type: 'bar', x: courseCollegeDict['course'], y: courseCollegeDict['num'],marker: {color: 'rgb(158,202,225)',opacity: 0.6,line: {\r\n      color: 'rgb(8,48,107)',\r\n      width: 2\r\n    }},hovertemplate: '<b>COUNT</b>: %{y}' +\r\n    '<br><b>COURSE</b>: %{x}<br><extra></extra>'\r\n  },\r\n]}\r\nlayout={ {\r\n  width: 800, height: 1000, title: 'COURSEWISE NUMBER OF COLLEGES',font: {family: 'Roboto, sans-serif',size: 20,color: '#7f7f7f'},\r\n  template:\"presentation\"\r\n  } }\r\n/>\r\n      </div>\r\n);\r\n}\r\n\r\nfunction YearWithColleges(){\r\n  const [yearCollegeDict, setYearCollegeDict] = useState({});\r\n\r\n  useEffect(() => {\r\n    \r\n    const fetchData = async() => {\r\n      const res = await axios.get(`${URL}`);\r\n      const {yearFounded} = res.data.data;\r\n      const yearData = {'year': Object.keys(yearFounded), 'num': Object.values(yearFounded)};\r\n      setYearCollegeDict(yearData);\r\n    } \r\n    fetchData();\r\n  }, []);\r\n  // let yearCollegeDict = {};\r\n  // yearCollegeDict = {\r\n  //   'year':[1989,1991,1993,1996,1997,1998,1999,2000,2001],\r\n  //   'num':[12,13,14,16,11,12,15,13,14]\r\n  // }\r\n  return(\r\n<div>\r\n  <Plot \r\ndata={[\r\n  {\r\n    type: 'scatter', x: yearCollegeDict['year'], y: yearCollegeDict['num'],mode:'lines+markers',marker:{color:'purple',width:2},line :{color:'#DC1C13',width:3,dash:'dashdot'}\r\n    \r\n  },\r\n]}\r\nlayout={{\r\n  width: 800, height: 1000, title: 'YEARWISE NUMBER OF COLLEGES',font: {family: 'Roboto, sans-serif',size: 20,color: '#7f7f7f'},\r\n  template:\"presentation\"}}\r\n  />\r\n  </div>\r\n  );\r\n}\r\n\r\nexport {StateWiseCollegePie,StateWiseCollegeBar,CourseWiseCollegePie,CourseWiseCollegeBar, YearWithColleges};","import {React} from 'react';\r\nimport Sunburst from 'sunburst-chart';\r\nimport Plotly from \"plotly.js-basic-dist\";\r\nimport createPlotlyComponent from 'react-plotly.js/factory';\r\nconst Plot = createPlotlyComponent(Plotly);\r\n\r\nfunction CollegeInfo(){\r\n\r\n  const myChart = Sunburst();\r\n  let courseCollegeDict = {};\r\n  courseCollegeDict = { \r\n    'course':['CS','IT','MECH'],\r\n    'num':[50,60,30]\r\n  };\r\nreturn (\r\n<div>\r\n<Plot\r\ndata={[\r\n  {\r\n    type: \"choroplethmapbox\", locations: [\"NY\", \"MA\", \"VT\"], z: [-50, -10, -20],\r\n    geojson: \"https://raw.githubusercontent.com/python-visualization/folium/master/examples/data/us-states.json\"\r\n    \r\n  },\r\n]}\r\nlayout={ {\r\n  mapbox: {center: {lon: -74, lat: 43}, zoom: 3.5},\r\n  width: 600, height:400\r\n  } }\r\n/>\r\n      </div>\r\n  // {x: [1, 2, 3],y: [2, 6, 3],type: 'scatter',mode: 'lines+markers',marker: {color: 'purple'},},\r\n);\r\n}\r\n\r\nfunction stackBarChart(){\r\n  var trace1 = {\r\n    x: ['giraffes', 'orangutans', 'monkeys'],\r\n    y: [20, 14, 23],\r\n    name: 'SF Zoo',\r\n    type: 'bar'\r\n  };\r\n  \r\n  var trace2 = {\r\n    x: ['giraffes', 'orangutans', 'monkeys'],\r\n    y: [12, 18, 29],\r\n    name: 'LA Zoo',\r\n    type: 'bar'\r\n  };\r\n\r\n  return(\r\n    <div>\r\n      <Plot \r\n        data = {[\r\n          {\r\n            x: ['giraffes', 'orangutans', 'monkeys'],\r\n            y: [20, 14, 23],\r\n            name: 'SF Zoo',\r\n            type: 'bar'\r\n            \r\n          },{\r\n            x: ['giraffes', 'orangutans', 'monkeys'],\r\n            y: [12, 18, 29],\r\n            name: 'LA Zoo',\r\n            type: 'bar'\r\n          }\r\n\r\n\r\n\r\n        ]}\r\n        \r\n        layout = {{\r\n          width:1000,\r\n          height:1000, \r\n          barmode: 'stack'\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}\r\n\r\n\r\nexport {CollegeInfo,stackBarChart};\r\n","import {React} from 'react';\r\nimport './App.css';\r\nimport {StateWiseCollegePie,StateWiseCollegeBar,CourseWiseCollegePie,CourseWiseCollegeBar, YearWithColleges} from './chart';\r\nimport {CollegeInfo,stackBarChart} from './collegeInfo';\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <div className=\"col\">\r\n        <h1>College Buddy</h1>\r\n        <div className=\"graph\"><StateWiseCollegePie /></div>\r\n        <div className=\"graph\"><StateWiseCollegeBar /></div>\r\n        <div className=\"graph\"><CourseWiseCollegePie/></div>\r\n        <div className=\"graph\"><CourseWiseCollegeBar/></div>\r\n        <div className=\"graph\"><YearWithColleges/></div> \r\n      </div>\r\n    </div>\r\n       \r\n\r\n    \r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}